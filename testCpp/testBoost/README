some material about boost, to learn boost

this is from book, Boost_C++_Application_Development_Cookbook
-----------------------------------------------
# ch1 staring to write your application
## getting configuration options

```cpp
#include <boost/program_options.hpp>
    // 'reading_file' exception class is declared in errors.hpp
#include <boost/program_options/errors.hpp>
#include <iostream>
    namespace opt = boost::program_options;
    int main(int argc, char *argv[])
    {
        opt::options_description desc("All options");
        // 'a' and 'o' are short option names for apples and
        // oranges 'name' option is not marked with
        // 'required()', so user may not support it
        desc.add_options()
            ("apples,a", opt::value<int>()->default_value(10),
             "apples that you have")
            ("oranges,o", opt::value<int>(), "oranges that you have")
            ("name", opt::value<std::string>(), "your name")
            ("help", "produce help message")
            ;
        opt::variables_map vm;
        // Parsing command line options and storing values to 'vm'
        opt::store(opt::parse_command_line(argc, argv, desc), vm);
        // We can also parse environment variables using
        // 'parse_environment' method
        opt::notify(vm);
        if (vm.count("help")) {
            std::cout << desc << "\n";
            return 1;
        }
        // Adding missing options from "aples_oranges.cfg"
        // config file.
        // You can also provide an istreamable object as a
        // first parameter for 'parse_config_file'
        // 'char' template parameter will be passed to
        // underlying std::basic_istream object
        try {
            opt::store(
                    opt::parse_config_file<char>("apples_oranges.cfg", desc),
                    vm
                    );
        } catch (const opt::reading_file& e) {
            std::cout
                << "Failed to open file 'apples_oranges.cfg': "
                << e.what();
        }
        opt::notify(vm);
        if (vm.count("name")) {
            std::cout << "Hi," << vm["name"].as<std::string>() << "!\n";
        }
        std::cout << "Fruits count: "
            << vm["apples"].as<int>() + vm["oranges"].as<int>()
            << std::endl;
        return 0; }
```

reading boost_1_56_pdf
----------------------------------------------------
insterested in MPL and Fusion
using std STL with std algorithm to be best practice
STL containers work on values. MPL containers work on types.
Fusion containers work on both types and values.

MPL
-----------------------------------------------------------------
from mpl_paper, MPL, template mateprogramming library
```cpp
    template< typename First, typename Rest >
    struct cons
    {
        typedef First first;
        typedef Rest rest;
    };
    struct nil {};
    typedef
    cons<int, cons<long, cons<std::vector<double>, nil> > > my_types;
```

```cpp
    // choose the larger of two types
    template<
    typename T1
        , typename T2
    , bool choose1 = (sizeof(T1) > sizeof(T2)) // hands off!
        >
        struct choose_larger
    {
        typedef T1 type;
    };
    // specialization for the case where sizeof(T2) >= sizeof(T1)
    template< typename T1, typename T2 >
    struct choose_larger< T1,T2,false >
    {
        typedef T2 type;
    };
    // get the largest of a cons-list
    template< typename T > struct largest;
    // specialization to peel apart the cons list
    template< typename First, typename Rest >
    struct largest< cons<First,Rest> >
    : choose_larger< First, typename largest<Rest>::type >
    {
        // type inherited from base
    };
    // specialization for loop termination
    template< typename First >
    struct largest< cons<First,nil> >
    {
        typedef First type;
    };
    int main() {
        // print the name of the largest of my_types
        std::cout
            << typeid(largest<my_types>::type).name()
            << std::endl
            ;
    }
```

```cpp
    // can't return an array in C++, so we need this wrapper
    template< typename T >
    struct wrapper
    {
        T x;
    };

    // return an array of the N! permutations of 'in'
    template< typename T >
    wrapper< typename permutation_holder<T>::type >
    all_permutations(T const& in)
    {
        wrapper<typename permutation_holder<T>::type> result;
        // copy the unpermutated array to the first result element
        unsigned const N = sizeof(T) / sizeof(**result.x);
        std::copy(&*in, &*in + N, result.x[0]);
        // enumerate the permutations
        unsigned const result_size = sizeof(result.x) / sizeof(T);
        for (T* dst = result.x + 1; dst != result.x + result_size; ++dst)
        {
            T* src = dst - 1;
            std::copy(*src, *src + N, *dst);
            std::next_permutation(*dst, *dst + N);
        }
        return result;
    }
```

find this paper is hard for me to undetstand
need to know more about metaprogramming

short introduction to selected classes of the boost C++ library
----------------------------------------------------
by Dimitri Reiswich

just introduce
TODO: to be continue
