some material about boost, to learn boost

this is from book, Boost_C++_Application_Development_Cookbook
-----------------------------------------------
# ch1 staring to write your application
## getting configuration options

```cpp
#include <boost/program_options.hpp>
    // 'reading_file' exception class is declared in errors.hpp
#include <boost/program_options/errors.hpp>
#include <iostream>
    namespace opt = boost::program_options;
    int main(int argc, char *argv[])
    {
        opt::options_description desc("All options");
        // 'a' and 'o' are short option names for apples and
        // oranges 'name' option is not marked with
        // 'required()', so user may not support it
        desc.add_options()
            ("apples,a", opt::value<int>()->default_value(10),
             "apples that you have")
            ("oranges,o", opt::value<int>(), "oranges that you have")
            ("name", opt::value<std::string>(), "your name")
            ("help", "produce help message")
            ;
        opt::variables_map vm;
        // Parsing command line options and storing values to 'vm'
        opt::store(opt::parse_command_line(argc, argv, desc), vm);
        // We can also parse environment variables using
        // 'parse_environment' method
        opt::notify(vm);
        if (vm.count("help")) {
            std::cout << desc << "\n";
            return 1;
        }
        // Adding missing options from "aples_oranges.cfg"
        // config file.
        // You can also provide an istreamable object as a
        // first parameter for 'parse_config_file'
        // 'char' template parameter will be passed to
        // underlying std::basic_istream object
        try {
            opt::store(
                    opt::parse_config_file<char>("apples_oranges.cfg", desc),
                    vm
                    );
        } catch (const opt::reading_file& e) {
            std::cout
                << "Failed to open file 'apples_oranges.cfg': "
                << e.what();
        }
        opt::notify(vm);
        if (vm.count("name")) {
            std::cout << "Hi," << vm["name"].as<std::string>() << "!\n";
        }
        std::cout << "Fruits count: "
            << vm["apples"].as<int>() + vm["oranges"].as<int>()
            << std::endl;
        return 0; }
```

reading boost_1_56_pdf
----------------------------------------------------
insterested in MPL and Fusion
using std STL with std algorithm to be best practice
STL containers work on values. MPL containers work on types.
Fusion containers work on both types and values.

MPL
-----------------------------------------------------------------
from mpl_paper, MPL, template mateprogramming library
```cpp
    template< typename First, typename Rest >
    struct cons
    {
        typedef First first;
        typedef Rest rest;
    };
    struct nil {};
    typedef
    cons<int, cons<long, cons<std::vector<double>, nil> > > my_types;
```

```cpp
    // choose the larger of two types
    template<
    typename T1
        , typename T2
    , bool choose1 = (sizeof(T1) > sizeof(T2)) // hands off!
        >
        struct choose_larger
    {
        typedef T1 type;
    };
    // specialization for the case where sizeof(T2) >= sizeof(T1)
    template< typename T1, typename T2 >
    struct choose_larger< T1,T2,false >
    {
        typedef T2 type;
    };
    // get the largest of a cons-list
    template< typename T > struct largest;
    // specialization to peel apart the cons list
    template< typename First, typename Rest >
    struct largest< cons<First,Rest> >
    : choose_larger< First, typename largest<Rest>::type >
    {
        // type inherited from base
    };
    // specialization for loop termination
    template< typename First >
    struct largest< cons<First,nil> >
    {
        typedef First type;
    };
    int main() {
        // print the name of the largest of my_types
        std::cout
            << typeid(largest<my_types>::type).name()
            << std::endl
            ;
    }
```

```cpp
    // can't return an array in C++, so we need this wrapper
    template< typename T >
    struct wrapper
    {
        T x;
    };

    // return an array of the N! permutations of 'in'
    template< typename T >
    wrapper< typename permutation_holder<T>::type >
    all_permutations(T const& in)
    {
        wrapper<typename permutation_holder<T>::type> result;
        // copy the unpermutated array to the first result element
        unsigned const N = sizeof(T) / sizeof(**result.x);
        std::copy(&*in, &*in + N, result.x[0]);
        // enumerate the permutations
        unsigned const result_size = sizeof(result.x) / sizeof(T);
        for (T* dst = result.x + 1; dst != result.x + result_size; ++dst)
        {
            T* src = dst - 1;
            std::copy(*src, *src + N, *dst);
            std::next_permutation(*dst, *dst + N);
        }
        return result;
    }
```

find this paper is hard for me to undetstand
need to know more about metaprogramming

short introduction to selected classes of the boost C++ library
----------------------------------------------------
by Dimitri Reiswich

just introduce
TODO: to be continue

# boost project
there is a example fold in the boost/msm fold, pretty good
output of SimpleTutorial.cpp
```bash
    entering: Player
    entering: Empty
    leaving: Empty
    player::open_drawer
    entering: Open
    -> Open
    leaving: Open
    player::close_drawer
    entering: Empty
    -> Empty
    wrong disk, sorry
    -> Empty
    leaving: Empty
    player::store_cd_info
    entering: Stopped
    -> Stopped
    leaving: Stopped
    player::start_playback
    entering: Playing
    leaving: Playing
    player::pause_playback
    -> Paused
    player::resume_playback
    entering: Playing
    -> Playing
    leaving: Playing
    player::pause_playback
    -> Paused
    player::stop_playback
    entering: Stopped
    -> Stopped
    leaving: Stopped
    entering: Stopped
    -> Stopped
    stop fsm
    leaving: Stopped
    leaving: Player
```

what's bjam
TODO: how doesn't boost manager it's project??
there are so many other things in boost project

well, I can read the source code, but I'd rather have to API document

C++ tempalte Metaprogramming  concept tools and techinques from boost and beyond
--------------------------------------------------------------------------------
well,
TODO:
when to use template, what's its use pattern, don't feel it in a code way
how to use a template and how to test it??

# official document
from http://www.boost.org/
myClass const & is the same as const myClass & ??

# boost_MSM_tutorial.pdf
so, according to the output, every time we need a state(struct), we create one(struct ctor).
inheritance from boost::statechart::simple_state<Stopped, Active>
and only add typedef sc::transition<EvStartStop, Stopped> reactions; will do the transition job.
that's to say, I still need to know the implement of 3rd party lib, this is too wired way to do it

## timer
```cpp
    // this is from boost_MSM_tutorial.pdf
    #include<boost/statechart/event.hpp>
    #include<boost/statechart/state_machine.hpp>
    #include<boost/statechart/simple_state.hpp>
    #include<boost/statechart/transition.hpp>

    #include<iostream>
    #include<ctime>

    namespace sc = boost::statechart;

    /*
    */
    struct IElapsedTime{
        virtual double ElapsedTime() const = 0;
    };

    struct EvStartStop : sc::event<EvStartStop> {
        EvStartStop() { std::cout<<"do EvStartStop\n"; }
    };
    struct EvReset : sc::event<EvReset> {
        EvReset() { std::cout<<"do EvReset\n"; }
    };

    /* forward declare */
    struct Active;
    struct Stopped;
    struct Running;

    struct StopWatch : sc::state_machine<StopWatch, Active> {
        StopWatch() { std::cout<<"StopWatch Mechine ctor\n"; }
        ~StopWatch() { std::cout<<"StopWatch Mechine detor\n"; }

        /* TODO: what's this method do??
        */
        double ElapsedTime() const{
            return state_cast<const IElapsedTime &>().ElapsedTime();
        }
    };

    struct Active : sc::simple_state< Active, StopWatch, Stopped> {
        typedef sc::transition<EvReset, Active> reaction;
        Active() : elapsedTime_(0.0) { std::cout<<"\tAvtive enter\n"; }
        ~Active() {
            std::cout<<"\tActive exit\n";
            std::cout<<"\t\ttotal time: "<<this->elapsedTime_<<std::endl;
        }

        double ElapsedTime() const { return elapsedTime_; }
        double &ElapsedTime() { return elapsedTime_; }

    private:
        double elapsedTime_;
    };

    struct Stopped : IElapsedTime, sc::simple_state<Stopped, Active> {
        typedef sc::transition<EvStartStop, Running> reactions;
        Stopped() { std::cout<<"\t\tStopped enter\n"; }
        ~Stopped() { std::cout<<"\t\tStopped exit\n"; }

        virtual double  ElapsedTime() const{
            return context<Active>().ElapsedTime();
        }
    };
    struct Running : IElapsedTime, sc::simple_state<Running, Active> {
        typedef sc::transition<EvStartStop, Stopped> reactions;
        Running() : startTime_( std::time(0) ) { std::cout<<"\t\tRuning enter\n"; }
        ~Running() {
            std::cout<<"\t\tRuning exit\n";
            std::cout<<"\t\ttime: "<<startTime_<<std::endl;
            // context<Active>().ElapsedTime() += std::difftime( std::time(0), startTime_);
            context<Active>().ElapsedTime() = ElapsedTime();
            // std::cout<<"\t\ttotal time: "<<context<Active>().ElapsedTime()<<std::endl;
        }
        virtual double ElapsedTime() const{
            return context<Active>().ElapsedTime() + std::difftime(std::time(0), this->startTime_);
        }
    private:
        std::time_t startTime_;
    };

    int main(){
        StopWatch myWatch;
        myWatch.initiate();
        std::cout<< myWatch.ElapsedTime() <<"\n";
        myWatch.process_event( EvStartStop() );     // running ctor
        sleep(1);
        std::cout<< myWatch.ElapsedTime() <<"\n";
        myWatch.process_event( EvStartStop() );
        myWatch.process_event( EvStartStop() );     // running
        sleep(1);
        std::cout<< myWatch.ElapsedTime() <<"\n";
        myWatch.process_event( EvStartStop() );
        myWatch.process_event( EvStartStop() );     // running
        sleep(1);
        std::cout<< myWatch.ElapsedTime() <<"\n";
        myWatch.process_event( EvReset() );
        return 0;
    }
    // notes:
    // how to record time in C++ ?: startTime_ is variable and don't change along
    // the time, but std::time(0) is current time based on 1970
```
### state local storage

to measure a function exec time, this's a great way to do it with C++
```cpp
    // I really like this code, from https://stackoverflow.com/questions/2808398/easily-measure-elapsed-time
    // and by now, I now what's meaning of using functor
    template<typename TimeT = std::chrono::milliseconds>
    struct measure
    {
        template<typename F, typename ...Args>
        static typename TimeT::rep execution(F&& func, Args&&... args)
        {
            auto start = std::chrono::steady_clock::now();
            std::forward<decltype(func)>(func)(std::forward<Args>(args)...);
            auto duration = std::chrono::duration_cast< TimeT>
                (std::chrono::steady_clock::now() - start);
            return duration.count();
        }
    };

    int main() {
        std::cout << measure<>::execution(main2) << std::endl;
    }
```
I still don't understand cs540::Function, leave it be for now

## Intermediate topics: A digital camera
### Spreading a state machine over multiple translation units
### Deferring events
### Guards
### In-state reactions
### transition actions
stop before advanced topics and this document don't help me a lot, because I am not so used to this style. It seems require a lot background
