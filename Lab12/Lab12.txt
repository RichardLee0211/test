1. Examine the man pages for pthread create, pthread join and pthread exit. Understand the different arguments they accept.
    DONE

2. What is the order of print statements in the above code?
    In thread 457230627
    In thread 457230627
    In main threab
    In thread 457230627
    Exiting main thread

3. Create a global variable global var and update the variable in the worker function.
In each thread, update the variable and print it. If one thread modifies the variable
does the change reflect in another thread?
    In thread 7ffc0a6a325c
    count++: 1
    In main threab
    In thread 7ffc0a6a325c
    count++: 2
    In thread 7ffc0a6a325c
    count++: 3
    Exiting main thread
    All the threads in a process share data in heap

4. Allocate some memory using malloc in the main thread and pass the pointer to the
worker thread as the argument. If the memory is modified in main thread, does it
reflect in the worker thread? Test and verify
    Yes, all thread share heap data

# part2
1. Compile the above code. Execute it multiple times consecutively (you can press the
up arrow to repeat the command). What is your finding?
    [wli100@remote04 Lab12]$ ./thread2
    ARRRRG sum is 1180374
    [wli100@remote04 Lab12]$ ./thread2
    ARRRRG sum is 1083886
    [wli100@remote04 Lab12]$ ./thread2
    ARRRRG sum is 1185748

2. Now, uncomment mutex lock and mutex unlock in the count function. Repeat the
previous step. What is your finding? The lock prevents the second thread from
making changes while the first thread is making changes.
    [wli100@remote04 Lab12]$ ./thread2
    ARRRRG sum is 2000000
    [wli100@remote04 Lab12]$ ./thread2
    ARRRRG sum is 2000000
    [wli100@remote04 Lab12]$ ./thread2
    ARRRRG sum is 2000000
